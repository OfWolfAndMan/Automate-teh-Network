---
==================================================
#Copy stdout to a file
- tasks:
    - raw: "{{ show arp }}"
      register: show
      #Puts output of the show command into the "show variable"
    - local_action: > #Represents multiline task. Local action denotes it being done on the ansible host
        copy content={{ show.stdout }}
             dest={{ inventory_hostname }}.arp.txt
      run_once: true #Used to prevent multiple runs if running on localhost but the task falls under multiple host

==================================================
#Error handling
- hosts: ios
  tasks:
  - ios_command:
      commands: show version
      provider: "{{ cli }}"
    register: result
  - fail: msg="Wrong Cisco IOS version"
    when: "not ('Version {{ version }}' in result.stdout[0])"

==================================================
#Preventing runs when certain variables are not defined
- name: Generate device configs
  connection: local
  tasks:
  - assert:
      that:
        - syslog_host is defined
        - snmp_host is defined
      msg: One of the NMS servers is not defined

==================================================
#Rescue block
- hosts: ios
  tasks:
  - block:
      - list of actions
    rescue:
      - actions to execute on failure
    always:
      - actions to execute at the end no matter what.

==================================================
#File management (Relevant to ansible host on localhost)
- hosts: localhost
  connection: local
  tasks:
  - file: path=version_report.txt state=absent
  - file: path=version_report.txt state=touch
  #Additional file options - (file, directory, link, hardlink)

==================================================
#Adding lines to a text file
- lineinfile:
    dest: version_report.txt
    regexp: "{{ inventory_hostname }}"
    line: "{{ inventory_hostname }}" has wrong IOS version"
  when: "not ('Version {{ version }}' in result.stdout[0])"

==================================================
#Adding blocks to text files
- blockinfile:
    dest: results.txt
    marker: "### { mark } {{ inventory_hostname }}"
    block: result.stdout[0]

#Marker - Text identifying the begin/end of a block
#Block - Block content
#Backup - Create backup copy before modification
#Create - Create a file if it doesn't exist

